{"ast":null,"code":"import { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useAppDispatch, useAppSelector } from \"../redux/store\";\nimport { setMessage } from \"../redux/initSlice\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar BgImage = function BgImage() {\n  return _jsx(ImageBackground, {\n    source: require(\"../assets/cl_start_bg.webp\"),\n    resizeMode: \"cover\",\n    style: styles.image,\n    children: _jsx(Text, {\n      style: styles.text,\n      children: \"Open up App.js to start working on your app!!\"\n    })\n  });\n};\nexport default function HomeScreen(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useAppDispatch();\n  var apiOrigin = process.env.EXPO_PUBLIC_API_ORIGIN;\n  var _useAppSelector = useAppSelector(function (state) {\n      return state.message;\n    }),\n    message = _useAppSelector.message;\n  return _jsxs(_Fragment, {\n    children: [_jsx(BgImage, {}), _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Text, {\n        children: \"Home Screen\"\n      }), _jsxs(Text, {\n        children: [\"EXPO_PUBLIC_API_ORIGIN: \", apiOrigin]\n      }), _jsx(StatusBar, {\n        style: \"auto\"\n      }), _jsx(Button, {\n        title: \"Go to Details\",\n        onPress: function onPress() {\n          return navigation.navigate('Details');\n        }\n      }), _jsxs(Text, {\n        style: {\n          marginTop: 5\n        },\n        children: [\"Redux msg: \", message]\n      }), _jsx(Button, {\n        title: \"Set new message\",\n        onPress: function onPress() {\n          return dispatch(setMessage('New Message from Component'));\n        }\n      }), _jsx(Button, {\n        title: \"\\u0417\\u0430\\u043A\\u0430\\u0437\",\n        onPress: function onPress() {\n          return navigation.navigate('Order');\n        }\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'flex-start',\n    backgroundColor: '#fff',\n    textAlign: 'center',\n    border: '2px solid green',\n    maxWidth: '500px'\n  },\n  image: {\n    flex: 1,\n    justifyContent: 'center',\n    width: '100%'\n  },\n  text: {\n    color: 'white',\n    fontSize: 42,\n    lineHeight: 84,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    backgroundColor: '#000000c0'\n  }\n});","map":{"version":3,"names":["StatusBar","StyleSheet","Text","View","Button","useAppDispatch","useAppSelector","setMessage","ImageBackground","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","BgImage","source","require","resizeMode","style","styles","image","children","text","HomeScreen","_ref","navigation","dispatch","apiOrigin","process","env","EXPO_PUBLIC_API_ORIGIN","_useAppSelector","state","message","container","title","onPress","navigate","marginTop","create","flex","display","flexDirection","justifyContent","alignItems","backgroundColor","textAlign","border","maxWidth","width","color","fontSize","lineHeight","fontWeight"],"sources":["/home/r2user/remrob/r2cleaning/services/nativeapp/screens/home.tsx"],"sourcesContent":["import {StatusBar} from 'expo-status-bar';\nimport {StyleSheet, Text, View, Button} from 'react-native';\nimport {useAppDispatch, useAppSelector} from '../redux/store';\nimport {setMessage} from '../redux/initSlice';\nimport {ImageBackground} from 'react-native';\n\nconst BgImage = () => (\n  <ImageBackground\n    source={require('../assets/cl_start_bg.webp')}\n    // style={{width: '100%', height: '40%'}}\n    resizeMode=\"cover\"\n    style={styles.image}\n  >\n    <Text style={styles.text}>\n      Open up App.js to start working on your app!!\n    </Text>\n  </ImageBackground>\n);\n/* const BgImage = () => (\n  <Image\n    source={require('../assets/cl_start_bg.webp')}\n    style={{width: '100%', height: '40%'}}\n  />\n); */\n// const BgImage2 = () => <Image source={require('../assets/')} />;\n\nexport default function HomeScreen({navigation}) {\n  const dispatch = useAppDispatch();\n  const apiOrigin = process.env.EXPO_PUBLIC_API_ORIGIN;\n  const {message} = useAppSelector((state) => state.message);\n  return (\n    <>\n      <BgImage />\n      <View style={styles.container}>\n        <Text>Home Screen</Text>\n\n        <Text>EXPO_PUBLIC_API_ORIGIN: {apiOrigin}</Text>\n        <StatusBar style=\"auto\" />\n        <Button\n          title=\"Go to Details\"\n          onPress={() => navigation.navigate('Details')}\n        />\n        <Text style={{marginTop: 5}}>Redux msg: {message}</Text>\n        <Button\n          title=\"Set new message\"\n          onPress={() => dispatch(setMessage('New Message from Component'))}\n        />\n        <Button title=\"Заказ\" onPress={() => navigation.navigate('Order')} />\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'flex-start',\n    backgroundColor: '#fff',\n    textAlign: 'center',\n    border: '2px solid green',\n    maxWidth: '500px',\n  },\n\n  image: {\n    flex: 1,\n    justifyContent: 'center',\n    width: '100%',\n  },\n  text: {\n    color: 'white',\n    fontSize: 42,\n    lineHeight: 84,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    backgroundColor: '#000000c0',\n  },\n});\n"],"mappings":"AAAA,SAAQA,SAAS,QAAO,iBAAiB;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAE1C,SAAQC,cAAc,EAAEC,cAAc;AACtC,SAAQC,UAAU;AAA4B,OAAAC,eAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAG9C,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAA;EAAA,OACXL,IAAA,CAACF,eAAe;IACdQ,MAAM,EAAEC,OAAO,6BAA6B,CAAE;IAE9CC,UAAU,EAAC,OAAO;IAClBC,KAAK,EAAEC,MAAM,CAACC,KAAM;IAAAC,QAAA,EAEpBZ,IAAA,CAACR,IAAI;MAACiB,KAAK,EAAEC,MAAM,CAACG,IAAK;MAAAD,QAAA,EAAC;IAE1B,CAAM;EAAC,CACQ,CAAC;AAAA,CACnB;AASD,eAAe,SAASE,UAAUA,CAAAC,IAAA,EAAe;EAAA,IAAbC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EAC5C,IAAMC,QAAQ,GAAGtB,cAAc,CAAC,CAAC;EACjC,IAAMuB,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;EACpD,IAAAC,eAAA,GAAkB1B,cAAc,CAAC,UAAC2B,KAAK;MAAA,OAAKA,KAAK,CAACC,OAAO;IAAA,EAAC;IAAnDA,OAAO,GAAAF,eAAA,CAAPE,OAAO;EACd,OACEtB,KAAA,CAAAE,SAAA;IAAAQ,QAAA,GACEZ,IAAA,CAACK,OAAO,IAAE,CAAC,EACXH,KAAA,CAACT,IAAI;MAACgB,KAAK,EAAEC,MAAM,CAACe,SAAU;MAAAb,QAAA,GAC5BZ,IAAA,CAACR,IAAI;QAAAoB,QAAA,EAAC;MAAW,CAAM,CAAC,EAExBV,KAAA,CAACV,IAAI;QAAAoB,QAAA,GAAC,0BAAwB,EAACM,SAAS;MAAA,CAAO,CAAC,EAChDlB,IAAA,CAACV,SAAS;QAACmB,KAAK,EAAC;MAAM,CAAE,CAAC,EAC1BT,IAAA,CAACN,MAAM;QACLgC,KAAK,EAAC,eAAe;QACrBC,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAMX,UAAU,CAACY,QAAQ,CAAC,SAAS,CAAC;QAAA;MAAC,CAC/C,CAAC,EACF1B,KAAA,CAACV,IAAI;QAACiB,KAAK,EAAE;UAACoB,SAAS,EAAE;QAAC,CAAE;QAAAjB,QAAA,GAAC,aAAW,EAACY,OAAO;MAAA,CAAO,CAAC,EACxDxB,IAAA,CAACN,MAAM;QACLgC,KAAK,EAAC,iBAAiB;QACvBC,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAMV,QAAQ,CAACpB,UAAU,CAAC,4BAA4B,CAAC,CAAC;QAAA;MAAC,CACnE,CAAC,EACFG,IAAA,CAACN,MAAM;QAACgC,KAAK,EAAC,gCAAO;QAACC,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAMX,UAAU,CAACY,QAAQ,CAAC,OAAO,CAAC;QAAA;MAAC,CAAE,CAAC;IAAA,CACjE,CAAC;EAAA,CACP,CAAC;AAEP;AAEA,IAAMlB,MAAM,GAAGnB,UAAU,CAACuC,MAAM,CAAC;EAC/BL,SAAS,EAAE;IACTM,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE,QAAQ;IACvBC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,YAAY;IACxBC,eAAe,EAAE,MAAM;IACvBC,SAAS,EAAE,QAAQ;IACnBC,MAAM,EAAE,iBAAiB;IACzBC,QAAQ,EAAE;EACZ,CAAC;EAED5B,KAAK,EAAE;IACLoB,IAAI,EAAE,CAAC;IACPG,cAAc,EAAE,QAAQ;IACxBM,KAAK,EAAE;EACT,CAAC;EACD3B,IAAI,EAAE;IACJ4B,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,EAAE;IACdC,UAAU,EAAE,MAAM;IAClBP,SAAS,EAAE,QAAQ;IACnBD,eAAe,EAAE;EACnB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}